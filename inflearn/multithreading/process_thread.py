'''
동시 작업을 위해서는 프로세스와 스레드에 이해가 필요
작업 관리자 - CPU - 프로세스 224개 / 스레드 2945개 
1. process : 많은 프로세스는 운영체제에 부담을 줌 
 운영체제에서 할당 받는 자원의 단위로 실행 중인 프로그램 (VS CODE, CHROME)
 프로그램에 있어 CPU 동작과 주소 공간이 독립적
 **CODE, DATA, STACK, HEAP 영역이 모두 독립적
 최소 1개의 메인 스레드를 보유함 (크롬을 예로, TAP 마다 스레드 보유)
 파이프, 파일, 소켓 등을 사용해서 프로세스 간 통신은 가능하나 COST가 높음 -> CONTEXT SWICHING COST 큼
 
2. Thread : 
 프로세스 내에 실행에 대한 흐름(실 모양)의 단위
 프로세스의 자원을 사용
 **STACK만 별도로 할당하고 CODE, DATA, HEAP은 공유함
 메모리를 공유하여 변수를 공유
 한 스레드의 결과가 다른 스레드의 영향을 끼침
 동기화 문제를 주의해서 코드를 작성해야 함 (디버깅 어려움)
 
3. MULTI Thread :
 한 개의 단일 어플리케이션 (응용 프로그램)을 여러 스레드로 구성하여 각각 작업하여 한 번에 처리
 시스템 자원 소모 감소 (효율성), 처리량 증가 (COST 감소)
 통신 부담 감소, 디버깅 어려움, 단일 프로세스에는 효과 미약, 자원 공유 문제(교착 상태), 프로세스에 영향을 준다
 
4. MULTI Process :
 한 개의 단일 어플리케이션(으용프로그램)을 여러 프로세스로 구성하여 작업 처리
 한 개 프로세스에 문제 발생 시, 문제 확산 없음 (교착 상태가 되지 않고, 작업 끝내기[process kill)로 가능)
 캐시 체인지를 하며, cost 비용이 매우 높음(오버 헤드), 복잡한 통신 방식을 사용함

'''